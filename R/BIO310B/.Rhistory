model <- lm(Precision ~ Score + I(Score^2), data = data) # logistico
# --- Summary
summary(model)
model <- lm(Precision ~ poly(Score, 2), data = data) # polinomial
# --- Summary
summary(model)
glmodel <- glm(Precision ~ Score, family = binomial(link = "logit"), data = data)
# --- Summary
summary(glmodel)
ggplot(model, aes(x=Score, y=Precision)) + geom_point()
plot(gmodel)
plot(glmodel)
# --- Fitting
ggplot(cars, aes(x=speed, y=dist)) +
geom_point(color='#2980B9', size = 4) +
geom_smooth(method=lm, color='#2C3E50')
# --- Fitting
ggplot(cars, aes(x=speed, y=dist)) +
geom_point(color='#2980B9', size = 4) +
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
summary(cars)
# --- Fitting
ggplot(cars, aes(x=speed, y=dist)) +
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
# --- Fitting
ggplot(cars, aes(x=speed, y=dist)) +
geom_point(color='#2980B9', size = 4) +
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
# --- Fitting
#ggplot(cars, aes(x=speed, y=dist)) +
ggplot(data, aes(x=Score, y=Pecision)) +
geom_point(color='#2980B9', size = 4) +
geom_smooth(method=lm, formula = y ~ x, color='#2C3E50')
# --- Fitting
ggplot(cars, aes(x=speed, y=dist)) +
geom_point(color='#2980B9', size = 4) +
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
# --- Fitting
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 4) +
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
# --- Fitting
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 4) +
geom_smooth(method=lm, formula = y ~ x, color='#2C3E50')
# --- Fitting
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 0.5) +
geom_smooth(method=lm, formula = y ~ x, color='#2C3E50')
# --- Fitting
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) +
geom_smooth(method=lm, formula = y ~ x, color='#2C3E50')
library(ggplot2)
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo"
data <- read.csv(file.path(path, "e-loocv_ecfp4_precision.csv"))
# --- Fitting
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) +
geom_smooth(method=lm, formula = y ~ x, color='#2C3E50')
# --- Models
model <- lm(Precision ~ Score, data = data) # lineal
# --- Summary
summary(glmodel)
# --- Summary
summary(model)
# --- Fitting
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) +
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
model <- lm(Precision ~ poly(Score, 2), data = data) # polinomial
# --- Summary
summary(model)
# --- Fitting
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) +
geom_smooth(method=lm, formula = y ~ poly(x, 3), color='#2C3E50')
model <- lm(Precision ~ poly(Score, 3), data = data) # polinomial
# --- Summary
summary(model)
model <- lm(Precision ~ poly(Score, 4), data = data) # polinomial
# --- Summary
summary(model)
# --- Fitting
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) +
geom_smooth(method=lm, formula = y ~ poly(x, 4), color='#2C3E50')
# --- Fitting
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) +
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
model <- lm(Precision ~ poly(Score, 2), data = data) # polinomial
# --- Summary
summary(model)
# --- Copy
ggplot(data, aes(x = Score, y = Precision)) +
geom_point(color = '#2980B9', size = 0.5) +
geom_line(data = results, aes(x = Score, y = fit), color = '#2C3E50') +
geom_ribbon(data = results, aes(x = Score, ymin = lwr, ymax = upr), alpha = 0.2, fill = '#2C3E50')
# --- Copy
model <- lm(Precision ~ Score, data = data)
new_data <- data.frame(Score = seq(min(data$Score), max(data$Score), length.out = 100))
predictions <- predict(model, newdata = new_data, interval = "confidence")
results <- cbind(new_data, predictions)
head(results)
ggplot(data, aes(x = Score, y = Precision)) +
geom_point(color = '#2980B9', size = 0.5) +
geom_line(data = results, aes(x = Score, y = fit), color = '#2C3E50') +
geom_ribbon(data = results, aes(x = Score, ymin = lwr, ymax = upr), alpha = 0.2, fill = '#2C3E50')
data <- read.csv(file.path(path, "e-loocv_ecfp4_precision.csv"))
# --- Copy
model <- lm(Precision ~ Score, data = data)
new_data <- data.frame(Score = seq(min(data$Score), max(data$Score), length.out = 100))
predictions <- predict(model, newdata = new_data, interval = "confidence")
results <- cbind(new_data, predictions)
head(results)
ggplot(data, aes(x = Score, y = Precision)) +
geom_point(color = '#2980B9', size = 0.5) +
geom_line(data = results, aes(x = Score, y = fit), color = '#2C3E50') +
geom_ribbon(data = results, aes(x = Score, ymin = lwr, ymax = upr), alpha = 0.2, fill = '#2C3E50')
# --- Copy
ggplot(cars, aes(x=speed, y=dist)) +
geom_point(color='#2980B9', size = 4) +
geom_smooth(method=lm, color='#2C3E50')
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo"
data <- read.csv(file.path(path, "nr-loocv_ecfp4_precision.csv"))
# --- Fitting
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) +
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
model <- lm(Precision ~ poly(Score, 2), data = data) # polinomial
summary(model)
summary(model)
data <- read.csv(file.path(path, "nr-loocv_ecfp4_precision.csv"))
library(ggplot2)
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo"
data <- read.csv(file.path(path, "nr-loocv_ecfp4_precision.csv"))
# --- Fitting
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) + # y ~ poly(x, 2)
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
model <- lm(Precision ~ poly(Score, 2), data = data) # polinomial
summary(model)
# --- Testing
ggplot(cars, aes(x=speed, y=dist)) +
geom_point(color='#2980B9', size = 4) +
geom_smooth(method=lm, color='#2C3E50')
data <- read.csv(file.path(path, "e-loocv_ecfp4_precision.csv"))
# --- Fitting
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) + # y ~ poly(x, 2)
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
model <- lm(Precision ~ poly(Score, 2), data = data) # polinomial
summary(model)
data <- read.csv(file.path(path, "e-loocv_ecfp4_precision_log_x.csv"))
# --- Fitting
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) + # y ~ poly(x, 2)
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
model <- lm(Precision ~ poly(Score, 2), data = data) # polinomial
summary(model)
library(ggplot2)
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo"
data <- read.csv(file.path(path, "e-loocv_ecfp4_precision_log_x.csv"))
library(ggplot2)
library(ggplot2)
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo-log-x"
data <- read.csv(file.path(path, "e-loocv_ecfp4_precision_log_x.csv"))
model <- lm(Precision ~ poly(Score, 2), data = data) # polinomial
summary(model)
# --- Plots
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) + # y ~ poly(x, 2)
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
data <- read.csv(file.path(path, "nr-loocv_ecfp4_precision_log_x.csv"))
# --- Models
model <- lm(Precision ~ poly(Score, 2), data = data) # polinomial
summary(model)
# --- Plots
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) + # y ~ poly(x, 2)
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
data <- read.csv(file.path(path, "ic-loocv_ecfp4_precision_log_x.csv"))
# --- Models
model <- lm(Precision ~ poly(Score, 2), data = data) # polinomial
summary(model)
# --- Plots
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) + # y ~ poly(x, 2)
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
data <- read.csv(file.path(path, "Chembl28CCandD-loocv_ecfp4_precision_log_x.csv"))
# --- Models
model <- lm(Precision ~ poly(Score, 2), data = data) # polinomial
summary(model)
# --- Plots
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) + # y ~ poly(x, 2)
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
# --- Plots
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) + # y ~ poly(x, 2)
geom_smooth(method=lm, formula = y ~ x, color='#2C3E50')
model <- lm(Precision ~ Score, data = data) # lineal
summary(model)
# --- Plots
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) + # y ~ poly(x, 2)
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
library(ggplot2)
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo-log-x"
data <- read.csv(file.path(path, "Chembl28CCandD-loocv_ecfp4_precision_log_x.csv"))
# --- Models
model <- lm(Precision ~ poly(Score, 2), data = data) # polinomial
summary(model)
# --- Plots
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) + # y ~ poly(x, 2)
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo-log-x"
data <- read.csv(file.path(path, "nr-loocv_ecfp4_precision_log_x.csv"))
# --- Models
model <- lm(Precision ~ poly(Score, 2), data = data) # polinomial
summary(model)
# --- Plots
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) + # y ~ poly(x, 2)
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
summary(model)
# --- Test
library(ggplot2)
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo-log-x"
data <- read.csv(file.path(path, "Chembl28CCandD-loocv_ecfp4_precision_log_x.csv"))
model <- lm(Precision ~ poly(Score, 2), data = data) # Modelo polinomial
summary(model)
new_data <- data.frame(Score = c(0.5))  # Sustituye 0.5 por el valor deseado
confidence <- predict(model, newdata = new_data, interval = "confidence", level = 0.95)
prediction <- predict(model, newdata = new_data, interval = "prediction", level = 0.95)
cat("Intervalo de confianza al 95%:\n")
print(confidence)
cat("\nIntervalo de predicción al 95%:\n")
print(prediction)
ggplot(data, aes(x = Score, y = Precision)) +
geom_point(color = '#2980B9', size = 1) +
geom_smooth(method = lm, formula = y ~ poly(x, 2), color = '#2C3E50') +
geom_errorbar(data = new_data, aes(ymin = confidence[,"lwr"], ymax = confidence[,"upr"], x = Score),
width = 0.05, color = "red") +
geom_point(data = new_data, aes(x = Score, y = confidence[,"fit"]), color = "red", size = 3) +
labs(title = "Modelo Polinomial con Intervalos de Confianza",
x = "Score",
y = "Precision") +
theme_minimal()
View(data)
# --- Test
library(ggplot2)
# --- Path and data
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo-log-x"
data <- read.csv(file.path(path, "Chembl28CCandD-loocv_ecfp4_precision_log_x.csv"))
# --- Models
model <- lm(Precision ~ poly(Score, 2), data = data)
# --- Calcular intervalo de confianza
new_data <- data.frame(Score = c(0.5))  # Sustituye 0.5 por el valor deseado
# Añadir intervalos de confianza y predicción
confidence <- predict(model, newdata = new_data, interval = "confidence", level = 0.95)
# --- Test
library(ggplot2)
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo-log-x"
data <- read.csv(file.path(path, "Chembl28CCandD-loocv_ecfp4_precision_log_x.csv"))
model <- lm(Precision ~ poly(Score, 2), data = data)
new_data <- data.frame(Score = c(0.5))  # Sustituye 0.5 por el valor deseado
confidence <- predict(model, newdata = new_data, interval = "confidence", level = 0.95)
new_data <- cbind(new_data, as.data.frame(confidence))  # Añadir resultados al DataFrame
ggplot(data, aes(x = Score, y = Precision)) +
geom_point(color = '#2980B9', size = 1) +
geom_smooth(method = lm, formula = y ~ poly(x, 2), color = '#2C3E50') +
geom_errorbar(data = new_data, aes(x = Score, ymin = lwr, ymax = upr),
width = 0.05, color = "red") +
geom_point(data = new_data, aes(x = Score, y = fit), color = "red", size = 3) +
labs(title = "Modelo Polinomial con Intervalos de Confianza",
x = "Score",
y = "Precision") +
theme_minimal()
ggplot(data, aes(x = Score, y = Precision)) +
geom_point(color = '#2980B9', size = 1) +
geom_smooth(method = lm, formula = y ~ poly(x, 2), color = '#2C3E50') +
geom_point(data = new_data, aes(x = Score, y = fit), color = "red", size = 3) +
labs(title = "Modelo Polinomial con Intervalos de Confianza",
x = "Score",
y = "Precision") +
theme_minimal()
library(ggplot2)
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo-log-x"
data <- read.csv(file.path(path, "Chembl28CCandD-loocv_ecfp4_precision_log_x.csv"))
# --- Models
model <- lm(Precision ~ poly(Score, 2), data = data) # polinomial
summary(model)
# --- Plots
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) + # y ~ poly(x, 2)
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo-log-x"
data <- read.csv(file.path(path, "nr-loocv_ecfp4_precision_log_x.csv"))
# --- Models
model <- lm(Precision ~ poly(Score, 2), data = data) # polinomial
summary(model)
# --- Plots
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) + # y ~ poly(x, 2)
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
# --- Test
plot(cars)
# --- Test
hist(cars)
# --- Test
cat(cars)
# --- Test
data(cars)
force(cars)
# --- Test
model <- lm(dist ~ poly(speed, 2), data = data)
# --- Test
model <- lm(dist ~ poly(speed, 2), data = cars)
summary(model)
ggplot(cars, aes(x=dist, y=speed)) +
geom_point(color='#2980B9', size = 1) + # y ~ poly(x, 2)
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
data <- read.csv(file.path(path, "nr-loocv_ecfp4_precision_log_x.csv"))
# --- Models
model <- lm(Precision ~ poly(Score, 2), data = data) # polinomial
summary(model)
# --- Plots
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) + # y ~ poly(x, 2)
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
library(ggplot2)
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo"
data <- read.csv(file.path(path, "e-loocv_ecfp4_precision.csv"))
# --- Save
model <- lm(Precision ~ Score + I(Score^2), data = data) # logistico
# --- Plots
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) + # y ~ poly(x, 2)
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo-log-x"
data <- read.csv(file.path(path, "Chembl28CCandD-loocv_ecfp4_precision_log_x.csv"))
# --- Models
model <- lm(Precision ~ poly(Score, 2), data = data) # polinomial
summary(model)
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo-log-x"
data <- read.csv(file.path(path, "Chembl28CCandD-loocv_ecfp4_precision_log_x.csv"))
log_fit <- nls(y ~ a + b * log(x), data = data, start = list(a = 0, b = 1))
log_fit <- nls(Precision ~ a + b * log(Score), data = data, start = list(a = 0, b = 1))
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo"
data <- read.csv(file.path(path, "e-loocv_ecfp4_precision.csv"))
log_fit <- nls(Precision ~ a + b * log(Score), data = data, start = list(a = 0, b = 1))
log_fit <- nls(Precision ~ log(Score), data = data)
library(dplyr)
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo-log-x"
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo-log-x"
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo"
data <- read.csv(file.path(path, "e-loocv_ecfp4_precision.csv"))
data_filtered <- data %>% filter(Score > 0)
log_fit <- nls(Precision ~ a + b * log(Score), data = data, start = list(a = 0, b = 1))
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo-log-x"
data <- read.csv(file.path(path, "Chembl28CCandD-loocv_ecfp4_precision_log_x.csv"))
data_filtered <- data %>% filter(Score > 0)
log_fit <- nls(Precision ~ a + b * log(Score), data = data, start = list(a = 0, b = 1))
View(data_filtered)
# Graficar la curva
plot(x, y, type = "l", col = "blue", lwd = 2,
main = "Gráfica de y = 0.61*log(x) + 0.07",
xlab = "x", ylab = "y")
# Definir el rango de x (mayor a 0, ya que log(x) no está definido para x <= 0)
x <- seq(0.1, 10, length.out = 100)  # Valores de x de 0.1 a 10
y <- 0.61 * log(x) + 0.07            # Calcular y según la ecuación
# Graficar la curva
plot(x, y, type = "l", col = "blue", lwd = 2,
main = "Gráfica de y = 0.61*log(x) + 0.07",
xlab = "x", ylab = "y")
# Agregar una cuadrícula para mejor visualización
grid()
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo-log-x"
data <- read.csv(file.path(path, "Chembl28CCandD-loocv_ecfp4_precision_log_x.csv"))
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo"
data <- read.csv(file.path(path, "e-loocv_ecfp4_precision.csv"))
x <- data$Score        # Asignar la columna 'Score' a x
y_real <- data$Precision  # Asignar la columna 'Precision' a y_real
# Calcular y teórico basado en la ecuación
y_pred <- 0.61 * log(x) + 0.07
# Graficar los datos reales y la curva teórica
plot(x, y_real, pch = 16, col = "red",
main = "Comparación de Precision y Modelo",
xlab = "Score", ylab = "Precision")
lines(sort(x), y_pred[order(x)], col = "blue", lwd = 2)
model <- lm(Precision ~ log(Score), data = data)
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo-log-x"
data <- read.csv(file.path(path, "Chembl28CCandD-loocv_ecfp4_precision_log_x.csv"))
model <- lm(Precision ~ log(Score), data = data)
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo-log-x"
data <- read.csv(file.path(path, "Chembl28CCandD-loocv_ecfp4_precision_log_x.csv"))
# --- Models
model <- lm(Precision ~ poly(Score, 2), data = data) # polinomial
# --- Plots
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) + # y ~ poly(x, 2)
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
data <- read.csv(file.path(path, "nr-loocv_ecfp4_precision_log_x.csv"))
# --- Models
model <- lm(Precision ~ poly(Score, 2), data = data) # polinomial
summary(model)
# --- Plots
ggplot(data, aes(x=Score, y=Precision)) +
geom_point(color='#2980B9', size = 1) + # y ~ poly(x, 2)
geom_smooth(method=lm, formula = y ~ poly(x, 2), color='#2C3E50')
install.packages(extraDistr)
install.packages(extradistr)
install.packages("extraDistr")
library(viridis)
library(ggthemes)
install.packages("viridis")
install.packages("ggthemes")
library(extraDistr)
library(viridis)
library(ggthemes)
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo-log-x"
data <- read.csv(file.path(path, "Chembl28CCandD-loocv_ecfp4_precision_log_x.csv"))
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo"
data <- read.csv(file.path(path, "e-loocv_ecfp4_precision.csv"))
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo-log-x"
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo"
data <- read.csv(file.path(path, "e-loocv_ecfp4_precision.csv"))
# --- Test
mean_precision <- mean(data$Precision)
size <- sd(data$Score) * 10
beta_mu_phi <- ggplot() +
geom_function(fun = dprop, args = list(mean = mean_precision, size = size),
aes(color = paste0("dprop(mean = ", round(mean_precision, 3),
", size = ", round(size, 1), ")")),
size = 1) +
scale_color_viridis_d(option = "plasma", end = 0.8, name = "",
guide = guide_legend(ncol = 1)) +
labs(title = "Mean- and precision-based beta distributions",
x = "Precision", y = "Density") +
theme_clean() +
theme(legend.position = "bottom")
library(ggplot2)
beta_mu_phi <- ggplot() +
geom_function(fun = dprop, args = list(mean = mean_precision, size = size),
aes(color = paste0("dprop(mean = ", round(mean_precision, 3),
", size = ", round(size, 1), ")")),
size = 1) +
scale_color_viridis_d(option = "plasma", end = 0.8, name = "",
guide = guide_legend(ncol = 1)) +
labs(title = "Mean- and precision-based beta distributions",
x = "Precision", y = "Density") +
theme_clean() +
theme(legend.position = "bottom")
print(beta_mu_phi)
# ---
n <- 101
x <- seq(0, 1, length.out = n)
fx <- sin(2 * pi * x)
set.seed(1)
y <- fx + rnorm(n, sd = 0.5)
plot(x, y)             # data
lines(x, fx, lwd = 2)  # f(x)
legend("topright", legend = "f(x)", lty = 1, lwd = 2, bty = "n")
library(npreg)
install.packages("npreg")
library(npreg)
x <- data$Score
y <- data$Precision  # Variable dependiente
mod.ss <- ss(x, y, nknots = 10)
path <- "/home/vice/Documents/git/BIO310B/out/precision-loo"
data <- read.csv(file.path(path, "e-loocv_ecfp4_precision.csv"))
x <- data$Score
y <- data$Precision
mod.ss <- ss(x, y, nknots = 10)
plot(x, y, main = "Modelo ajustado con splines", col = "blue", pch = 16,
xlab = "Score", ylab = "Precision")
mod.ss <- ss(x, y, nknots = 10, tol = 1e-5)
lines(x, predict(mod.ss, x), col = "red", lwd = 2)
x <- data$Score
y <- data$Precision
mod.ss <- ss(x, y, nknots = 10, tol = 1e-5)
print(mod.ss)
plot(x, y, main = "Splines", col = "blue", pch = 16,
xlab = "Score", ylab = "Precision")
lines(x, predict(mod.ss, x), col = "red", lwd = 2)
mod.ss <- ss(x, y, nknots = 20, tol = 1e-5)
print(mod.ss)
plot(x, y, main = "Splines", col = "blue", pch = 16,
xlab = "Score", ylab = "Precision")
lines(x, predict(mod.ss, x), col = "red", lwd = 2)
mod.ss <- ss(x, y, nknots = 10)
# ---
x <- data$Score      # Variable independiente
y <- data$Precision  # Variable dependiente
if (any(y == 0) || any(y == 1)) {
warning("Hay valores de Precision exactamente 0 o 1. Estos valores serán ajustados.")
# Transformar valores exactamente 0 y 1 para evitar problemas con la transformación logit
y <- pmin(pmax(y, 1e-10), 1 - 1e-10)
}
# Transformar la variable dependiente usando logit
y_logit <- log(y / (1 - y))
mod.ss <- ss(x, y_logit, nknots = 10, tol = 1e-5)
print(mod.ss)
x_sorted <- sort(x)
y_pred_logit <- predict(mod.ss, x_sorted)
y_pred <- 1 / (1 + exp(-y_pred_logit))
plot(x, y, main = "Modelo ajustado con splines (transformación logit)", col = "blue", pch = 16,
xlab = "Score", ylab = "Precision")
lines(x_sorted, y_pred, col = "red", lwd = 2) # Línea ajustada
